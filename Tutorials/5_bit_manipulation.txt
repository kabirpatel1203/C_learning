# ðŸ“š Complete Guide to Bit Manipulation in C

---

# 1. What is Bit Manipulation?

âœ… **Bit manipulation** means **working directly with the bits** (0s and 1s) inside numbers.  
âœ… You perform operations to:
- Set bits
- Clear bits
- Toggle bits
- Check bits
- Shift bits
- Mask bits

ðŸ’¡ It gives you **fast**, **efficient**, **low-level control** of data.

---

# 2. Why Learn Bit Manipulation?

- Fast processing (used in embedded systems, games, OS development)
- Memory efficient (small devices, IoT)
- Essential for interviews and problem solving
- Control hardware devices (microcontrollers, etc.)

---

# 3. Basic Bitwise Operators

| Operator | Symbol | Meaning                      | Example    |
|----------|--------|-------------------------------|------------|
| AND      | `&`    | 1 if both bits are 1           | `a & b`    |
| OR       | `|`    | 1 if either bit is 1           | `a | b`    |
| XOR      | `^`    | 1 if bits are different        | `a ^ b`    |
| NOT      | `~`    | Flip bits (1 â†’ 0, 0 â†’ 1)       | `~a`       |
| Left Shift | `<<` | Shift bits to the left         | `a << n`   |
| Right Shift | `>>`| Shift bits to the right        | `a >> n`   |

---

# 4. Shifting Bits

### 4.1 Left Shift (`<<`)
- Moves all bits to the left
- Multiplies the number by 2^n

```c
int a = 3;  // 0000 0011
a = a << 2; // 0000 1100 â†’ 12
```

### 4.2 Right Shift (`>>`)
- Moves all bits to the right
- Divides the number by 2^n

```c
int a = 12; // 0000 1100
a = a >> 2; // 0000 0011 â†’ 3
```

---

# 5. Masking

âœ… Masking means using bit operations to **target specific bits**.  
You create a **mask** using **shifting**.

Example:  
Mask for 3rd bit â†’ `(1 << 3)` â†’ `0000 1000`

---

# 6. Bit Manipulation Operations

---

## 6.1 Checking a Bit

**Check** if a particular bit is set (1).

```c
if (num & (1 << pos)) {
    // Bit is 1
} else {
    // Bit is 0
}
```

âœ… Use **AND `&`** with mask.

---

## 6.2 Setting a Bit

**Set** a particular bit to 1.

```c
num = num | (1 << pos);
```

âœ… Use **OR `|`** with mask.

---

## 6.3 Clearing a Bit

**Clear** (make 0) a particular bit.

```c
num = num & ~(1 << pos);
```

âœ… Use **AND `&`** with **NOT `~`** of mask.

---

## 6.4 Toggling a Bit

**Flip** a particular bit (0 â†’ 1, 1 â†’ 0).

```c
num = num ^ (1 << pos);
```

âœ… Use **XOR `^`** with mask.

---

# 7. Visual Table for Easy Memorization

| Task         | Operation | Formula                    |
|--------------|------------|-----------------------------|
| Check bit    | AND        | `num & (1 << pos)`           |
| Set bit      | OR         | `num | (1 << pos)`           |
| Clear bit    | AND with NOT | `num & ~(1 << pos)`        |
| Toggle bit   | XOR        | `num ^ (1 << pos)`           |

---

# 8. Advanced Bit Techniques

---

## 8.1 Counting Number of Set Bits

How many bits are 1 in a number.

```c
int count = 0;
while (n) {
    count += n & 1;
    n = n >> 1;
}
printf("Set bits: %d\n", count);
```

---

## 8.2 Checking if a Number is Power of 2

Power of 2 numbers have only **one bit set**.

```c
if (n && !(n & (n - 1))) {
    printf("Power of 2\n");
}
```

Example:
- 4 â†’ `100`
- 8 â†’ `1000`
- 16 â†’ `10000`

---

## 8.3 Swapping Two Numbers Without Temporary Variable

Using XOR:

```c
a = a ^ b;
b = a ^ b;
a = a ^ b;
```

---

# 9. Bit Masks in Real Life

- Permissions in Linux (read/write/execute bits)
- Network address calculation (IP masking)
- Game development (tracking states with bits)
- Embedded programming (control LEDs, sensors)

---

# 10. Golden Tips

- Always create **mask** using `1 << pos`
- `AND` (`&`) is used for **checking** and **clearing**
- `OR` (`|`) is used for **setting**
- `XOR` (`^`) is used for **toggling**
- Always **test** in small numbers first (like 0â€“255)

---

# 11. Mini Cheat Sheet

| Operation        | Code Example             |
|------------------|---------------------------|
| Set 5th bit      | `num = num | (1 << 5);`    |
| Clear 5th bit    | `num = num & ~(1 << 5);`   |
| Toggle 5th bit   | `num = num ^ (1 << 5);`    |
| Check 5th bit    | `if (num & (1 << 5)) {...}`|

---

# 12. Practice Questions (for you later)

- Set the 7th bit of number 45.
- Clear the 2nd bit of number 13.
- Toggle the 3rd bit of number 8.
- Count number of set bits in 29.
- Check if 16 is a power of 2.

(If you want, Iâ€™ll create a small **C file** for you with all these practice problems ready!)

---

# ðŸŽ¯ Conclusion:

âœ… Bit manipulation = powerful tool  
âœ… Shifting + masking = the real magic  
âœ… Practice is the only way to master it!

