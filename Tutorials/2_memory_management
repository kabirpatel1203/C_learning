# üìö Memory Management in C (Deep Dive)
https://www.w3schools.com/c/c_memory_management.php
---

## 1. **What is Memory Management?**
Memory management in C means **allocating**, **using**, and **freeing** memory **manually**.

- In high-level languages (like Python or Java), memory is managed automatically (Garbage Collection).
- In C, **you are responsible** for requesting memory and releasing it.

**If you don't release it properly:**
- **Memory leaks** happen ‚Äî memory is wasted.
- **Dangling pointers** can occur ‚Äî accessing freed memory ‚Äî leading to crashes.

---
## 2. **Types of Memory in a C Program**

| Memory Area        | What goes there?                                      | Who manages it?      |
|---------------------|--------------------------------------------------------|----------------------|
| **Stack**           | Local variables inside functions                      | Managed automatically |
| **Heap**            | Dynamically allocated memory (`malloc`, `calloc`, etc.) | Managed by programmer |
| **Code (Text) segment** | Actual compiled instructions (functions, code)     | OS loads it |
| **Data segment** (Static/Global) | Global and static variables              | OS and programmer |

üß† **Stack** is fast but small.  
üß† **Heap** is slower but huge (limited by system RAM).

---

## 3. **Functions Used for Memory Management**
| Function | Purpose |
|----------|---------|
| `malloc()` | Allocate uninitialized memory |
| `calloc()` | Allocate zero-initialized memory |
| `realloc()` | Resize previously allocated memory |
| `free()` | Free memory that was allocated |

---

## 4. **Deep Dive into Each Function**

### üîµ `malloc()`
- **Syntax**: `void* malloc(size_t size);`
- Allocates `size` bytes of memory and returns a `void*` pointer.

‚úÖ Success: pointer to allocated memory  
‚ùå Failure: returns `NULL`

```c
#include <stdio.h>
#include <stdlib.h>

int main() {
    int *arr = (int *)malloc(5 * sizeof(int)); // allocate memory for 5 ints

    if (arr == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }

    // Using the memory
    for(int i = 0; i < 5; i++) {
        arr[i] = i * 10;
        printf("%d ", arr[i]);
    }

    free(arr); // Free the memory
    return 0;
}
```

---

### üîµ `calloc()`
- **Syntax**: `void* calloc(size_t num, size_t size);`
- Allocates **zero-initialized** memory.

```c
int *arr = (int *)calloc(5, sizeof(int));
```
Difference with `malloc`: Memory is automatically set to 0.

---

### üîµ `realloc()`
- **Syntax**: `void* realloc(void* ptr, size_t new_size);`
- Resizes a previously allocated memory block.

```c
arr = (int *)realloc(arr, 10 * sizeof(int)); // Resize to 10 integers
```
If it can't expand the block in place, it allocates a new block, copies old data, frees old memory.

---

### üîµ `free()`
- **Syntax**: `void free(void* ptr);`
- Frees previously allocated memory.

üö® **Important**:
- After `free()`, always set pointer to `NULL` to avoid **dangling pointers**.

```c
free(arr);
arr = NULL;
```

---

## 5. **Common Mistakes in Memory Management**

| Mistake | Description | Example |
|---------|-------------|---------|
| Memory Leak | Not freeing allocated memory | Forgetting `free()` |
| Double Free | Freeing memory twice | Calling `free()` twice |
| Use After Free | Using memory after it's freed | Accessing a freed pointer |
| Forgetting NULL check | Not checking `malloc()` return | Not handling `NULL` |

---

## 6. **Memory Leak Example**

```c
void memoryLeak() {
    int *ptr = (int *)malloc(10 * sizeof(int));
    // Forgot to free(ptr)
}
```
This `ptr` memory is leaked. Even when the function ends, memory isn't returned to OS.

‚úÖ **Fix**: Always `free()` when done.

---

## 7. **How to Detect Memory Leaks**

‚úÖ Manually:
- Ensure every `malloc()`/`calloc()`/`realloc()` has a matching `free()`.

‚úÖ Tools:
- **Valgrind** (Linux/Mac):
  ```bash
  valgrind --leak-check=full ./your_program
  ```
- Visual Studio also has built-in memory leak detection for Windows C programs.

Example output:
```
==1234== LEAK SUMMARY:
==1234== definitely lost: 40 bytes in 1 blocks
==1234== indirectly lost: 0 bytes in 0 blocks
```

---

## 8. **Practical Example: Allocating 2D Array**

```c
#include <stdio.h>
#include <stdlib.h>

int main() {
    int rows = 3, cols = 4;
    int **matrix = (int **)malloc(rows * sizeof(int *));
    
    for(int i = 0; i < rows; i++) {
        matrix[i] = (int *)malloc(cols * sizeof(int));
    }

    // Initialize and print
    for(int i = 0; i < rows; i++) {
        for(int j = 0; j < cols; j++) {
            matrix[i][j] = i * cols + j;
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }

    // Freeing memory
    for(int i = 0; i < rows; i++) {
        free(matrix[i]);
    }
    free(matrix);

    return 0;
}
```

---

# üöÄ Summary
- `malloc()`, `calloc()`, `realloc()`, `free()` are **core**.
- Always **check for NULL** after `malloc()`.
- Always **free memory** when done.
- Use **Valgrind** to check leaks.

---
# üî• Assignment for you (Practical practice)

üëâ Write a program to:
- Allocate memory for an array of 10 integers.
- Initialize it with multiples of 7.
- Expand it to hold 20 integers (using `realloc`).
- Fill the new elements with multiples of 9.
- Free the memory properly.

