https://www.geeksforgeeks.org/dereference-pointer-in-c/


**First Topic: Pointers (Deep Dive)**

---

### 1. What Are Pointers? (Theory)

- A **pointer** is a variable that **stores the memory address** of another variable.
- In C, every variable is stored somewhere in memory (RAM). That memory location has an **address** (like a house address).
- **Pointer variables** allow you to **directly access or modify** the value at that memory address.

**Example**:
```c
int x = 10;
int *ptr = &x;  // 'ptr' now holds the address of 'x'
```
- `&x` means "address of x"
- `*ptr` means "value at the address stored in ptr"

| Term          | Meaning                                              |
| --------------|------------------------------------------------------ |
| `&`           | "Address of" operator                                 |
| `*` (when used with pointer) | "Dereference" operator, to get the value |

---
### 2. Memory Representation (Theory)

Suppose:
```c
int x = 10;
int *p = &x;
```

- `x` is stored at, say, address **0x100**.
- `p` now stores **0x100**.

Visual:

```
Address   Variable   Value
0x100     x          10
0x200     p          0x100
```

When you do `*p`, it goes to address 0x100 and gets 10.

---
### 3. Pointer Declaration (Syntax)

```c
datatype *pointer_name;
```

Examples:
```c
int *p;       // pointer to int
char *cptr;   // pointer to char
float *fptr;  // pointer to float
```

---
### 4. Why Use Pointers?

- Dynamic memory allocation (`malloc`, `calloc`)
- Passing large structures to functions (efficient)
- Arrays and strings manipulation
- Creating complex data structures (linked lists, trees, graphs)
- Function pointers (advanced)

---
### 5. Practical Code Example

**Basic pointer usage**:

```c
#include <stdio.h>

int main() {
    int num = 25;
    int *ptr = &num;

    printf("Address of num: %p\n", &num);
    printf("Address stored in ptr: %p\n", ptr);
    printf("Value pointed to by ptr: %d\n", *ptr);

    *ptr = 50;  // Changing the value of num through ptr

    printf("New value of num: %d\n", num);

    return 0;
}


int *ptr - declares a pointer variable ptr that can store the address of an integer.
int *ptr = &num - this declares and also saves the address of num
ptr - stores the address of the variable num
*ptr - accesses the value which is stored at the address of ptr
&num - address of the variable stored

```

**Output:**
```
Address of num: 0x7ffc...
Address stored in ptr: 0x7ffc...
Value pointed to by ptr: 25
New value of num: 50
```

---
### 6. Practical Exercise for You ‚úçÔ∏è

**Task 1**:  
Write a program that:
- Declares an integer.
- Declares a pointer to that integer.
- Prints the address and value of the integer using the pointer.
- Changes the value through the pointer.
- Prints the new value.

---

**Task 2 (Optional Advanced)**:  
Write a small program that **swaps two integers** using pointers.

Hint:
```c
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}
```

Call it like:
```c
swap(&x, &y);
```

---

**Important Tip**:  
Whenever you're stuck, you can use `printf` to print addresses (`%p`) and values to understand how pointers work.

---
### üìö Summary Checklist

| Concept                | Status |
|-------------------------|--------|
| What is a pointer?      | ‚úÖ |
| Address-of operator (&) | ‚úÖ |
| Dereference operator (*)| ‚úÖ |
| Pointer declaration     | ‚úÖ |
| Pointer modifying values| ‚úÖ |
| Swapping values using pointers | ‚úÖ (after exercise) |

